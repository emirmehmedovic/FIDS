'use strict';

// Define the name of the ENUM type used by the status column
// This name might be generated by Sequelize (e.g., "enum_flights_status")
// Or it might have been explicitly named in an earlier migration.
// Check your database schema or previous migrations if unsure.
// Assuming the default naming convention for this example:
const enumName = 'enum_flights_status';
const tableName = 'flights';
const columnName = 'status';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    // Add new values to the existing ENUM type
    // IMPORTANT: Use IF NOT EXISTS to prevent errors if the values already exist (e.g., from a failed previous attempt)
    await queryInterface.sequelize.query(`ALTER TYPE "${enumName}" ADD VALUE IF NOT EXISTS 'BOARDING';`);
    await queryInterface.sequelize.query(`ALTER TYPE "${enumName}" ADD VALUE IF NOT EXISTS 'DIVERTED';`);

    // Note: Reverting this requires recreating the type without the added values,
    // which is complex and potentially data-destructive if the new values are in use.
    // The down migration is often simplified or omitted for ENUM additions.
  },

  async down (queryInterface, Sequelize) {
    // Reverting ENUM additions is complex and potentially risky.
    // A common approach is to leave the ENUM as is, or manually handle
    // data migration and type recreation if absolutely necessary.
    // This down migration will be a no-op for safety.
    console.log(`Reverting addition of 'BOARDING' and 'DIVERTED' to ${enumName} is not automatically supported. Manual intervention may be required.`);
    // Example (Risky - requires ensuring no data uses the values):
    // await queryInterface.sequelize.query(`
    //   -- 1. Create a new type without the values
    //   CREATE TYPE "${enumName}_new" AS ENUM('SCHEDULED', 'ON_TIME', 'DELAYED', 'CANCELLED', 'DEPARTED', 'ARRIVED');
    //   -- 2. Update data (if any uses the values being removed - this part is tricky)
    //   -- UPDATE "${tableName}" SET "${columnName}" = 'DELAYED'::"${enumName}_new" WHERE "${columnName}" = 'DIVERTED'; -- Example update
    //   -- UPDATE "${tableName}" SET "${columnName}" = 'DEPARTED'::"${enumName}_new" WHERE "${columnName}" = 'BOARDING'; -- Example update
    //   -- 3. Alter column to use the new type (casting needed)
    //   ALTER TABLE "${tableName}" ALTER COLUMN "${columnName}" TYPE "${enumName}_new" USING ("${columnName}"::text::"${enumName}_new");
    //   -- 4. Drop the old type
    //   DROP TYPE "${enumName}";
    //   -- 5. Rename the new type to the original name
    //   ALTER TYPE "${enumName}_new" RENAME TO "${enumName}";
    // `);
    return Promise.resolve(); // Indicate successful no-op
  }
};
